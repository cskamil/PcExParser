'''
@goalDescription(Construct a program that determines the average ratings that respondents provided to four new flavors of soda as well as the average ratings of each respondent. In total, 10 respondents tried each new flavor and gave it a score from 1 to 5, where 1 equals poor and 5 equals excellent.)
@name(Determining the Average Ratings of each Respondent and Average Ratings Given to Each Soda in the Survey)
@distractor{code(respondent_sum = [0] * num_sodas), helpDescription()}
@distractor{code(respondent_sum = []), helpDescription()}
@distractor{code(respondent_sum[j] = ratings_data[i][j]), helpDescription()}
@distractor{code(respondent_sum[i] += ratings_data[i][j]), helpDescription()}
@distractor{code(respondent_sum[j] += ratings_data[j][i]), helpDescription()}
'''
#Step 1: Define a 4x10 two-dimensional list
'''@helpDescription(We need to use two-dimensional list (a list of lists) to create a matrix of the ratings. This statement creates a 4x10 two-dimensional list called ratings_data of ratings given to 4 new flavors of soda by 10 respondents.)'''
'''@helpDescription(Each matrix row corresponds to a sublist in the two-dimensional list. Note that lists can naturally span multiple lines if we want them to because they are contained by a pair of brackets.)''' 
ratings_data = [[3, 4, 5, 2, 1, 4, 3, 2, 4, 4],
          [2, 4, 3, 4, 3, 3, 2, 1, 2, 2],
          [3, 5, 4, 5, 5, 3, 2, 5, 5, 5],
          [1, 1, 1, 3, 1, 2, 1, 3, 2, 4]]

#Step 2: Compute the sum of the ratings for sodas and respondents
'''@helpDescription(We store the number of rows in the two-dimensional list ratings_data in variable num_sodas because we'll use it in different steps of the program. Note that the function len(ratings_data) returns the number of rows in the two-dimensional list ratings_data)'''
num_sodas = len(ratings_data)
'''@helpDescription(We store the number of columns in the two-dimensional list ratings_data in variable num_respondents because we'll use it in different steps of the program. Note that the function len(ratings_data[0]) returns the number of columns in the two-dimensional list ratings_data)'''
num_respondents = len(ratings_data[0])
'''@helpDescription(To compute the average ratings for sodas, we need to first compute the sum of the ratings for the four new flavors of sodas and then divide the sum of the ratings given to each soda by the total number of respondents. We need four variables to compute the sum of the ratings, which means that a list is a great way to store this data. In general, whenever we find ourselves thinking that we need n of some kind of data, we should think about using a list of length n. Here, we need four variables for storing the sum of the ratings for the sodas; so, we create a list of length 4.)'''
'''@helpDescription(The first, second, third, and fourth element in the list will be used for storing the sum of the ratings for the first, second, third, and fourth soda. In this statement, we create the list and fill it with 0s because we have not started computing the sum of the ratings yet.)'''
'''@helpDescription(We use the repetition operator * to create the list soda_sum. The repetition operator makes N copies of this list and joins them all together into a single list, where N is the number of sodas stored in variable num_sodas, here, 4. Note that when the operand on the left side of the * is a list, it becomes the repetition operator and not the multiplication.)'''
soda_sum = [0] * num_sodas
'''@blank(To compute the average ratings of a respondent, we need to first compute the sum of the ratings of the respondent and then divide the sum by the number of the ratings that the respondent provided. We need ten variables to compute the sum of the ratings, which means that a list is a great way to store this data. In general, whenever we find ourselves thinking that we need n of some kind of data, we should think about using a list of length n. Here, we need ten variables for storing the sum of the ratings of respondents; so, we create a list of length 10.)'''
'''@blank(The first, second, ..., and tenth element in the list will be used for storing the sum of the ratings of the first, second, ..., and tenth respondent. In this statement, we create the list and fill it with 0s because we have not started computing the sum of the ratings yet.)'''
'''@blank(We use the repetition operator * to create the list respondent_sum. The repetition operator makes N copies of this list and joins them all together into a single list, where N is the number of respondents stored in variable num_respondents, here, 10. Note that when the operand on the left side of the * is a list, it becomes the repetition operator and not the multiplication.)'''
respondent_sum = [0] * num_respondents
'''@helpDescription(We need to process the rating data and compute the sum of the ratings for each soda (row totals) and the sum of the ratings of each respondent (column totals). This data, that is stored in ratings_data, is a two-dimensional list; therefore, we need to use nested for loops to process all of its elements. This statement is the outer for loop in the nested loop and it processes the data stored in ratings_data row by row.)'''
'''@helpDescription(To iterate over the rows in the two-dimensional list ratings_data, we need the indexes to start at 0 with every integer number up to but not including the number of rows. We get this sequence by calling the range(num_sodas) function. Note that variable num_sodas stores the number of rows in the two-dimensional list ratings_data.)'''    
for i in range(num_sodas):
    
    #Step 3: Compute the sum of the ratings for the i-th soda and j-th respondent
    '''@helpDescription(This statement is the inner loop of the nested loop. It processes the elements within the row i where i is the row index in the two-dimensional list ratings_data that changes after each iteration of the outer loop. To iterate over the individual elements in each row (i.e., iterating over the columns within a row) in the two-dimensional list ratings_data, we need the indexes to start at 0 with every integer number up to but not including the number of columns. We get this sequence by calling the range(num_respondents) function.)'''
    '''@helpDescription(Note that variable num_respondents stores the number of columns in the two-dimensional list ratings_data. Also, note that the name that we choose for the index in the inner loop should be different from the index name in the outer for loop. Here, we choose i for the row index and j for the column index.)'''    
    for j in range(num_respondents):
        '''@helpDescription(This statement adds the value of the current element in row i and column j to the element in the list soda_sum that stores the sum of the ratings for the i-th soda in the two-dimensional list ratings_data.)'''
        '''@helpDescription(If i is 0, it adds the current element to the soda_sum[0] that stores the sum of the ratings for the Soda #1; if i is 1, it adds the current element to the soda_sum[1] that stores the sum of the ratings for the Soda #2; and so on.)'''
        '''@helpDescription(Note that the += operator adds the value of the element in row i and column j of the two-dimensional list ratings_data (i.e., element ratings_data[i][j]) to the value of the list element soda_sum[i] and the result is stored in the list element soda_sum[i]. Thus, this statement is equivalent to the statement soda_sum[i] = soda_sum[i] + ratings_data[i][j].)'''
        soda_sum[i] += ratings_data[i][j]
        '''@blank(This statement adds the value of the current element in row i and column j to the element in the list respondent_sum that stores the sum of the ratings of the j-th respondent in the two-dimensional list ratings_data.)'''
        '''@blank(If j is 0, it adds the current element to the respondent_sum[0] that stores the sum of the ratings of the Respondent #1; if j is 1, it adds the current element to the respondent_sum[1] that stores the sum of the ratings of the Respondent #2; and so on.)'''
        '''@blank(Note that the += operator adds the value of the element in row i and column j of the two-dimensional list ratings_data (i.e., element ratings_data[i][j]) to the value of the list element respondent_sum[j] and the result is stored in the list element respondent_sum[j]. Thus, this statement is equivalent to the statement respondent_sum[j] = respondent_sum[j] + ratings_data[i][j].)'''
        respondent_sum[j] += ratings_data[i][j]
        
#Step 4: Compute and print the average rating for each soda
'''@helpDescription(This statement prints to the default standard output stream the text "Averages:" followed by the end-of-line character at the end. Note that the argument of print is enclosed in quotation marks because it is to be printed as it is.)'''
print("Averages:")   
'''@helpDescription(We want to compute and print the average of ratings given to the sodas. To do this, we need to iterate over the sum of the ratings for the sodas stored the list soda_sum, we need the indexes to start at 0 with every integer number up to but not including the number of sodas. We get this sequence by calling the range(num_sodas) function. Remember the number of sodas is stored in variable num_sodas.)'''    
for i in range(num_sodas):
    '''@helpDescription(We get the average rating for a soda by dividing the sum of the ratings given to that soda by the number of respondents stored in variable num_respondents.)'''
    '''@helpDescription(The / operator performs the real division, producing a floating point result; thus, the average is a floating-point number. We call template.format function to format how this floating-point number should be printed. The format function returns the result of replacing each {â€¦} placeholder in the template string with its corresponding argument passed to the format function. Anything else, which is not contained in curly braces will be literally printed, i.e. without any changes.)'''
    '''@helpDescription(Here, we use {:d} to print the first decimal argument of the format function (i.e., the soda number which we get by calling i+1), and {:.2f} to print the floating-point argument of the format function with just two decimal digits. Notice that the format specification inside a pair of curly braces starts with a : and followed by the text that specifies how the value should be presented, including the floating-point precision (if the argument is a float) and data type. The data type d requires a decimal argument while the data type f requires a floating-point argument. An error will occur if the argument is not the expected data type. The formatted string will be printed followed by the end-of-line character at the end. )'''
    print('Soda # {:d} : {:.2f}'.format((i+1), soda_sum[i]/num_respondents))

#Step 5: Compute and print the average rating for each respondent    
'''@helpDescription(We want to compute and print the average of ratings of each respondent. To do this, we need to iterate over the sum of the ratings of respondents stored the list respondent_sum, we need the indexes to start at 0 with every integer number up to but not including the number of respondents. We get this sequence by calling the range(num_respondents) function. Remember the number of respondents is stored in variable num_respondents.)'''    
for j in range(num_respondents):
    '''@helpDescription(We get the average rating of a respondent by dividing the sum of the ratings of the respondent by the number of the ratings that the respondent provided.)'''
    '''@helpDescription(The / operator performs the real division, producing a floating point result; thus, the average is a floating-point number. We call template.format function to format how this floating-point number should be printed. The format function returns the result of replacing each {â€¦} placeholder in the template string with its corresponding argument passed to the format function. Anything else, which is not contained in curly braces will be literally printed, i.e. without any changes.)'''
    '''@helpDescription(Here, we use {:d} to print the first decimal argument of the format function (i.e., the respondent number which we get by calling j+1), and {:.2f} to print the floating-point argument of the format function with just two decimal digits. Notice that the format specification inside a pair of curly braces starts with a : and followed by the text that specifies how the value should be presented, including the floating-point precision (if the argument is a float) and data type. The data type d requires a decimal argument while the data type f requires a floating-point argument. An error will occur if the argument is not the expected data type. The formatted string will be printed followed by the end-of-line character at the end. )'''
    print('Respondent # {:d} : {:.2f}'.format((j+1), respondent_sum[j]/num_sodas))